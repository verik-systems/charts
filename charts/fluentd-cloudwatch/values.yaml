## @section Global Parameters
## @param labels.app common app label
## @param labels.app.kubernetes.io/name common Kubernetes app label
## @param labels.app.kubernetes.io/component common Kubernetes app component label
## @param labels.k8s-app another k8s app name
labels:
  app: fluentd-cloudwatch
  app.kubernetes.io/name: fluentd-cloudwatch
  app.kubernetes.io/component: logging
  k8s-app: fluentd-cloudwatch
  
## @param serviceAccount.name service account name
serviceAccount:
  name: fluentd

## @param clusterRole.rules[0].apiGroups api groups rules
## @param clusterRole.rules[0].resources resources is applied
## @param clusterRole.rules[0].verbs resources verbs is applied
clusterRole:
  rules:
  - apiGroups: [""]
    resources:
      - namespaces
      - pods
      - pods/logs
    verbs: ["get", "list", "watch"]


##
## @section Resource quota configuraiton Parameters
##

## Metric Server containers' resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
## @param resources.limits.cpu Kubernetes resources limit cpu configure
## @param resources.limits.memory Kubernetes resources limit memory configure
## @param resources.requests.cpu Kubernetes resources requests cpu configure
## @param resources.requests.memory Kubernetes resources requests memory configure
resources:
  limits:
    cpu: 100m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 256Mi


##
## @section configuraiton Parameters
##

## @param daemonSet.annotations.configHash config hash
daemonSet:
  annotations:
    configHash: 8915de4cf9c3551a8dc74c0137a3e83569d28c71044b0359c2578d2e0461825

## @param configMap.clusterInfo.cluster.name cluster name
## @param configMap.clusterInfo.logs.region region logs
## @param configMap.data.fluentConfig config of fluentd
## @param configMap.data.containerConfig config of fluentd
## @param configMap.data.systemd.conf config of fluentd
## @param configMap.data.host.conf config of fluentd
configMap:
  clusterInfo: 
    cluster.name: "" # <please input cluster name>
    logs.region:  "" # <please input logs region>
  data:
    fluentConfig: |
      @include containers.conf
      @include systemd.conf
      @include host.conf

      <match fluent.**>
        @type null
      </match>
    containerConfig:  |
      <source>
        @type tail
        @id in_tail_container_logs
        @label @containers
        path /var/log/containers/*.log
        exclude_path ["/var/log/containers/cloudwatch-agent*", "/var/log/containers/fluentd*"]
        pos_file /var/log/fluentd-containers.log.pos
        tag *
        read_from_head true
        <parse>
          @type json
          time_format %Y-%m-%dT%H:%M:%S.%NZ
        </parse>
      </source>

      <source>
        @type tail
        @id in_tail_cwagent_logs
        @label @cwagentlogs
        path /var/log/containers/cloudwatch-agent*
        pos_file /var/log/cloudwatch-agent.log.pos
        tag *
        read_from_head true
        <parse>
          @type json
          time_format %Y-%m-%dT%H:%M:%S.%NZ
        </parse>
      </source>

      <source>
        @type tail
        @id in_tail_fluentd_logs
        @label @fluentdlogs
        path /var/log/containers/fluentd*
        pos_file /var/log/fluentd.log.pos
        tag *
        read_from_head true
        <parse>
          @type json
          time_format %Y-%m-%dT%H:%M:%S.%NZ
        </parse>
      </source>

      <label @fluentdlogs>
        <filter **>
          @type kubernetes_metadata
          @id filter_kube_metadata_fluentd
        </filter>

        <filter **>
          @type record_transformer
          @id filter_fluentd_stream_transformer
          <record>
            stream_name ${tag_parts[3]}
          </record>
          remove_keys $.kubernetes.pod_id, $.kubernetes.master_url, $.kubernetes.container_image_id, $.kubernetes.namespace_id
        </filter>

        <match **>
          @type relabel
          @label @NORMAL
        </match>
      </label>

      <label @containers>
        <filter **>
          @type kubernetes_metadata
          @id filter_kube_metadata
        </filter>

        <filter **>
          @type record_transformer
          @id filter_containers_stream_transformer
          <record>
            stream_name ${tag_parts[3]}
          </record>
          remove_keys $.kubernetes.pod_id, $.kubernetes.master_url, $.kubernetes.container_image_id, $.kubernetes.namespace_id
        </filter>

        <filter **>
          @type concat
          key log
          multiline_start_regexp /^\S/
          separator ""
          flush_interval 5
          timeout_label @NORMAL
        </filter>

        <match **>
          @type relabel
          @label @NORMAL
        </match>
      </label>

      <label @cwagentlogs>
        <filter **>
          @type kubernetes_metadata
          @id filter_kube_metadata_cwagent
        </filter>

        <filter **>
          @type record_transformer
          @id filter_cwagent_stream_transformer
          <record>
            stream_name ${tag_parts[3]}
          </record>
          remove_keys $.kubernetes.pod_id, $.kubernetes.master_url, $.kubernetes.container_image_id, $.kubernetes.namespace_id
        </filter>

        <filter **>
          @type concat
          key log
          multiline_start_regexp /^\d{4}[-/]\d{1,2}[-/]\d{1,2}/
          separator ""
          flush_interval 5
          timeout_label @NORMAL
        </filter>

        <match **>
          @type relabel
          @label @NORMAL
        </match>
      </label>

      <label @NORMAL>
        <match **>
          @type cloudwatch_logs
          @id out_cloudwatch_logs_containers
          region "#{ENV.fetch('REGION')}"
          log_group_name "/aws/containerinsights/#{ENV.fetch('CLUSTER_NAME')}/application"
          log_stream_name_key stream_name
          remove_log_stream_name_key true
          auto_create_stream true
          <buffer>
            flush_interval 5
            chunk_limit_size 2m
            queued_chunks_limit_size 32
            retry_forever true
          </buffer>
        </match>
      </label>
    systemd.conf: |
      <source>
        @type systemd
        @id in_systemd_kubelet
        @label @systemd
        filters [{ "_SYSTEMD_UNIT": "kubelet.service" }]
        <entry>
          field_map {"MESSAGE": "message", "_HOSTNAME": "hostname", "_SYSTEMD_UNIT": "systemd_unit"}
          field_map_strict true
        </entry>
        path /var/log/journal
        <storage>
          @type local
          persistent true
          path /var/log/fluentd-journald-kubelet-pos.json
        </storage>
        read_from_head true
        tag kubelet.service
      </source>

      <source>
        @type systemd
        @id in_systemd_kubeproxy
        @label @systemd
        filters [{ "_SYSTEMD_UNIT": "kubeproxy.service" }]
        <entry>
          field_map {"MESSAGE": "message", "_HOSTNAME": "hostname", "_SYSTEMD_UNIT": "systemd_unit"}
          field_map_strict true
        </entry>
        path /var/log/journal
        <storage>
          @type local
          persistent true
          path /var/log/fluentd-journald-kubeproxy-pos.json
        </storage>
        read_from_head true
        tag kubeproxy.service
      </source>

      <source>
        @type systemd
        @id in_systemd_docker
        @label @systemd
        filters [{ "_SYSTEMD_UNIT": "docker.service" }]
        <entry>
          field_map {"MESSAGE": "message", "_HOSTNAME": "hostname", "_SYSTEMD_UNIT": "systemd_unit"}
          field_map_strict true
        </entry>
        path /var/log/journal
        <storage>
          @type local
          persistent true
          path /var/log/fluentd-journald-docker-pos.json
        </storage>
        read_from_head true
        tag docker.service
      </source>

      <label @systemd>
        <filter **>
          @type kubernetes_metadata
          @id filter_kube_metadata_systemd
        </filter>

        <filter **>
          @type record_transformer
          @id filter_systemd_stream_transformer
          <record>
            stream_name ${tag}-${record["hostname"]}
          </record>
          remove_keys $.kubernetes.pod_id, $.kubernetes.master_url, $.kubernetes.container_image_id, $.kubernetes.namespace_id
        </filter>

        <match **>
          @type cloudwatch_logs
          @id out_cloudwatch_logs_systemd
          region "#{ENV.fetch('REGION')}"
          log_group_name "/aws/containerinsights/#{ENV.fetch('CLUSTER_NAME')}/dataplane"
          log_stream_name_key stream_name
          auto_create_stream true
          remove_log_stream_name_key true
          <buffer>
            flush_interval 5
            chunk_limit_size 2m
            queued_chunks_limit_size 32
            retry_forever true
          </buffer>
        </match>
      </label>
    host.conf: |
      <source>
        @type tail
        @id in_tail_dmesg
        @label @hostlogs
        path /var/log/dmesg
        pos_file /var/log/dmesg.log.pos
        tag host.dmesg
        read_from_head true
        <parse>
          @type syslog
        </parse>
      </source>

      <source>
        @type tail
        @id in_tail_secure
        @label @hostlogs
        path /var/log/secure
        pos_file /var/log/secure.log.pos
        tag host.secure
        read_from_head true
        <parse>
          @type syslog
        </parse>
      </source>

      <source>
        @type tail
        @id in_tail_messages
        @label @hostlogs
        path /var/log/messages
        pos_file /var/log/messages.log.pos
        tag host.messages
        read_from_head true
        <parse>
          @type syslog
        </parse>
      </source>

      <label @hostlogs>
        <filter **>
          @type kubernetes_metadata
          @id filter_kube_metadata_host
        </filter>

        <filter **>
          @type record_transformer
          @id filter_containers_stream_transformer_host
          <record>
            stream_name ${tag}-${record["host"]}
          </record>
          remove_keys $.kubernetes.pod_id, $.kubernetes.master_url, $.kubernetes.container_image_id, $.kubernetes.namespace_id
        </filter>

        <match host.**>
          @type cloudwatch_logs
          @id out_cloudwatch_logs_host_logs
          region "#{ENV.fetch('REGION')}"
          log_group_name "/aws/containerinsights/#{ENV.fetch('CLUSTER_NAME')}/host"
          log_stream_name_key stream_name
          remove_log_stream_name_key true
          auto_create_stream true
          <buffer>
            flush_interval 5
            chunk_limit_size 2m
            queued_chunks_limit_size 32
            retry_forever true
          </buffer>
        </match>
      </label>